{"file_contents":{"agents/merchant-agent.js":{"content":"const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));\n\n// Simulated agent class for demonstration\nclass MerchantAgent {\n  constructor(config) {\n    this.name = config.name;\n    this.role = config.role;\n  }\n\n  async handlePaymentConfirmation(msg) {\n    console.log(\"📩 Received A2A message:\", msg);\n\n    if (msg.type === \"payment.confirmation\") {\n      const { txHash, from, to, amount, token } = msg.data;\n      console.log(\"✅ Logging payment to merchant dashboard...\");\n\n      try {\n        const response = await fetch(\"http://localhost:3000/api/agent/receipt\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            txHash,\n            from,\n            to,\n            amount,\n            token,\n            timestamp: new Date().toISOString(),\n          }),\n        });\n\n        const result = await response.json();\n        console.log(\"📊 Dashboard response:\", result);\n      } catch (error) {\n        console.error(\"❌ Error posting to dashboard:\", error);\n      }\n    }\n  }\n}\n\n// Create and run the agent\nconst agent = new MerchantAgent({\n  name: \"MerchantAgent\",\n  role: \"merchant\",\n});\n\n// Simulate receiving a payment confirmation\n(async () => {\n  const fakeMsg = {\n    type: \"payment.confirmation\",\n    data: {\n      txHash: \"0xHEDERA123\",\n      from: \"0xHederaUser\",\n      to: \"0x76520dB38f6Dd54a5c8F10a9EB130b8171A1715d\",\n      amount: \"25.0\",\n      token: \"USDC\",\n    },\n  };\n  \n  await agent.handlePaymentConfirmation(fakeMsg);\n})();\n","size_bytes":1573},"agents/merchant-agent.ts":{"content":"const fetch = require(\"node-fetch\");\n\n// Simulated agent class for demonstration\nclass MerchantAgent {\n  name: string;\n  role: string;\n\n  constructor(config: { name: string; role: string }) {\n    this.name = config.name;\n    this.role = config.role;\n  }\n\n  async handlePaymentConfirmation(msg: any) {\n    console.log(\"📩 Received A2A message:\", msg);\n\n    if (msg.type === \"payment.confirmation\") {\n      const { txHash, from, to, amount, token } = msg.data;\n      console.log(\"✅ Logging payment to merchant dashboard...\");\n\n      try {\n        const response = await fetch(\"http://localhost:3000/api/agent/receipt\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            txHash,\n            from,\n            to,\n            amount,\n            token,\n            timestamp: new Date().toISOString(),\n          }),\n        });\n\n        const result = await response.json();\n        console.log(\"📊 Dashboard response:\", result);\n      } catch (error) {\n        console.error(\"❌ Error posting to dashboard:\", error);\n      }\n    }\n  }\n}\n\n// Create and run the agent\nconst agent = new MerchantAgent({\n  name: \"MerchantAgent\",\n  role: \"merchant\",\n});\n\n// Simulate receiving a payment confirmation\n(async () => {\n  const fakeMsg = {\n    type: \"payment.confirmation\",\n    data: {\n      txHash: \"0xHEDERA123\",\n      from: \"0xHederaUser\",\n      to: \"0x76520dB38f6Dd54a5c8F10a9EB130b8171A1715d\",\n      amount: \"25.0\",\n      token: \"USDC\",\n    },\n  };\n  \n  await agent.handlePaymentConfirmation(fakeMsg);\n})();\n","size_bytes":1588},"README.md":{"content":"# Agentic Payments\n\nA cross-chain payment analytics system powered by Hedera Agent Kit and Base network integration.\n\n## 🚀 Features\n\n- **Multi-Wallet Support**: Connect with MetaMask, WalletConnect, Coinbase Wallet, and more\n- **Cross-Chain Analytics**: Real-time payment tracking across Base network\n- **Hedera Agent Integration**: Automated payment processing with Hedera Agent Kit\n- **Dynamic Recipients**: Send payments to any Ethereum address\n- **Real-time Dashboard**: Live analytics and transaction monitoring\n\n## 🛠️ Tech Stack\n\n- **Frontend**: Next.js 14, React 18, TypeScript\n- **Styling**: Tailwind CSS 3\n- **Wallet Integration**: RainbowKit, Wagmi, Viem\n- **Blockchain**: Base Network, Hedera\n- **Analytics**: Blockscout API\n\n## ✨ Design Features\n\n- **Professional Design**: MAANG-quality UI inspired by Stripe, Vercel, and Linear\n- **Clean Dark Theme**: Sophisticated color palette with refined accent colors\n- **Purposeful Animations**: Minimal transitions only where they enhance UX (KPI count-up)\n- **Interactive Elements**: Subtle hover effects, copy buttons, status indicators\n- **System Typography**: Native fonts for optimal performance and familiarity\n- **Toast Notifications**: Real-time user feedback with Sonner\n- **Responsive Layout**: Professional grid systems and proper breakpoints\n- **Form Design**: Clean inputs with proper focus states and validation\n- **Data Tables**: Professional tables with clear hierarchy and spacing\n\n## ⚠️ Important Notes\n\n- **Agent Receipts**: Currently stored in-memory (not persistent). For production use, implement a database backend.\n- **Development**: Configured for Replit environment (port 5000, 0.0.0.0 binding)\n- **Real Data**: Dashboard pulls actual transaction data from Base network via Blockscout API\n- **Form Validation**: Client-side validation for addresses and amounts with user-friendly error messages\n\n## 📦 Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/agentic-payments.git\ncd agentic-payments\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Set up environment variables:\n```bash\ncp apps/web/.env.local.example apps/web/.env.local\n```\n\n4. Configure your environment variables in `apps/web/.env.local`:\n```\nNEXT_PUBLIC_BLOCKSCOUT_BASE=https://base.blockscout.com/api\nNEXT_PUBLIC_MERCHANT_ADDRESS=your_merchant_address\nNEXT_PUBLIC_USDC_ADDRESS=0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\nNEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=your_project_id\n```\n\n5. Start the development server:\n```bash\nnpm run dev\n```\n\n## 🌐 Usage\n\n### Dashboard\nVisit `http://localhost:5000/dashboard` (or port 3000 for non-Replit) to view:\n- Real-time payment analytics\n- Base network transaction data\n- Agent payment receipts\n- Total revenue calculations\n\n### Payment Interface\nVisit `http://localhost:5000/pay` (or port 3000 for non-Replit) to:\n- Connect your wallet (supports 20+ wallets)\n- Enter payment amount\n- Specify recipient address\n- Process cross-chain payments\n\n## 🔧 API Endpoints\n\n- `GET /api/merchant/summary` - Base network analytics\n- `POST /api/agent/receipt` - Hedera agent payment receipts\n- `GET /api/agent/receipt` - Retrieve payment history\n\n## 🤖 Hedera Agent Integration\n\nThe system integrates with Hedera Agent Kit for automated payment processing:\n\n```javascript\n// Agent payment receipt\n{\n  \"txHash\": \"0x...\",\n  \"from\": \"sender_address\",\n  \"to\": \"recipient_address\", \n  \"amount\": \"100.0\",\n  \"token\": \"USDC\",\n  \"timestamp\": \"2025-10-24T21:00:00Z\"\n}\n```\n\n## 🚀 Deployment\n\n### Vercel (Recommended)\n1. Connect your GitHub repository to Vercel\n2. Set environment variables in Vercel dashboard\n3. Deploy automatically on push to main branch\n\n### Manual Deployment\n```bash\nnpm run build\nnpm start\n```\n\n## 📊 Analytics Features\n\n- **Real-time Updates**: Live transaction monitoring\n- **Cross-chain Data**: Base network integration\n- **Agent Payments**: Hedera agent transaction tracking\n- **Revenue Analytics**: Total USDC calculations\n- **Transaction History**: Complete payment logs\n\n## 🔗 Supported Networks\n\n- **Base Network**: Primary payment network\n- **Ethereum**: Wallet connection support\n- **Hedera**: Agent integration\n- **Multi-chain**: Extensible architecture\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\n3. Commit changes: `git commit -m 'Add amazing feature'`\n4. Push to branch: `git push origin feature/amazing-feature`\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [Hedera Agent Kit](https://github.com/hashgraph/hedera-agent-kit) for agent integration\n- [RainbowKit](https://www.rainbowkit.com/) for wallet connection\n- [Base Network](https://base.org/) for blockchain infrastructure\n- [Blockscout](https://blockscout.com/) for blockchain analytics\n","size_bytes":4901},"replit.md":{"content":"# Agentic Payments - Project Documentation\n\n## Overview\nA cross-chain payment analytics system powered by Hedera Agent Kit and Base network integration. This project was imported from GitHub and required complete frontend implementation.\n\n## Purpose\n- Multi-wallet support for Web3 payments\n- Real-time payment analytics across Base network\n- Hedera Agent integration for automated payment processing\n- Dynamic recipient payment system\n\n## Tech Stack\n- **Frontend**: Next.js 14, React 18, TypeScript\n- **Styling**: Tailwind CSS 3\n- **Wallet Integration**: RainbowKit, Wagmi, Viem\n- **Blockchain**: Base Network (Ethereum L2), Hedera\n- **Analytics**: Blockscout API\n\n## Project Structure\n```\n/\n├── apps/\n│   └── web/               # Next.js frontend application\n│       ├── app/           # App router pages and API routes\n│       │   ├── api/       # API endpoints\n│       │   │   ├── merchant/summary/  # Base network analytics\n│       │   │   └── agent/receipt/     # Agent payment receipts\n│       │   ├── dashboard/ # Analytics dashboard page\n│       │   ├── pay/       # Payment interface page\n│       │   ├── layout.tsx # Root layout with providers\n│       │   ├── page.tsx   # Homepage\n│       │   └── providers.tsx # RainbowKit/Wagmi setup\n│       ├── .env.local     # Environment variables\n│       └── package.json   # Frontend dependencies\n├── agents/\n│   ├── merchant-agent.js  # Hedera agent implementation (JS)\n│   └── merchant-agent.ts  # Hedera agent implementation (TS)\n└── package.json           # Root package.json\n\n```\n\n## Recent Changes (Oct 24, 2025)\n- Created complete Next.js 14 frontend (original import was incomplete)\n- Set up RainbowKit wallet connection with Base network support\n- Implemented payment analytics dashboard with real Blockscout API integration\n- Created payment interface page with USDC transfer functionality\n- Configured for Replit environment (port 5000, 0.0.0.0 binding)\n- Downgraded from Next.js 16/React 19 to Next.js 14/React 18 for memory constraints\n- Downgraded from Tailwind 4 to Tailwind 3 for compatibility\n- Set up deployment configuration for autoscale\n\n### Hackathon-Worthy Redesign (Latest)\n- **Visual Impact**: Striking animated gradient backgrounds, floating particle effects, glowing buttons\n- **Data Visualization**: Integrated Recharts for real-time transaction analytics with smooth area charts\n- **Animations**: Purposeful animations including gradient flows, fade-in-up transitions, count-up effects, live pulse indicators\n- **Modern Effects**: Glass morphism cards, animated gradient borders, radial glows, floating particles layer\n- **Color Palette**: Deep navy background with vibrant gradient accents (blue-purple-pink spectrum)\n- **Typography**: Gradient text headings, system fonts for performance\n- **Components**: Glass cards with backdrop blur, glowing hover states, animated borders\n- **Hero Section**: Eye-catching gradient typography, particle effects, CTA buttons with glow effects\n- **Dashboard**: Live KPI cards with pulse animations, real-time Recharts visualization, automated data updates\n- **Payment Interface**: Interactive glass cards, network status indicators, feature showcase section\n- **Layout**: Clean navigation, professional spacing, responsive grid systems\n- **Dependencies**: Added react-is for Recharts compatibility\n\n## Key Features\n1. **Dashboard** (`/dashboard`):\n   - Total revenue tracking with animated count-up effects\n   - Live transaction chart using Recharts (AreaChart visualization)\n   - Base network transaction analytics with pulse indicators\n   - Agent payment receipts table\n   - Real-time data updates every 10 seconds\n   - Glass morphism KPI cards with glowing borders\n\n2. **Payment Interface** (`/pay`):\n   - Multi-wallet connection (20+ wallets via RainbowKit)\n   - USDC payments on Base network\n   - Dynamic recipient addresses\n   - Transaction tracking\n\n3. **API Routes**:\n   - `GET /api/merchant/summary` - Fetches Base network analytics from Blockscout\n   - `POST /api/agent/receipt` - Saves Hedera agent payment receipts\n   - `GET /api/agent/receipt` - Retrieves agent payment history\n\n## Environment Variables\nRequired in `apps/web/.env.local`:\n- `NEXT_PUBLIC_BLOCKSCOUT_BASE` - Blockscout API endpoint\n- `NEXT_PUBLIC_MERCHANT_ADDRESS` - Merchant wallet address\n- `NEXT_PUBLIC_USDC_ADDRESS` - USDC token contract address on Base\n- `NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID` - WalletConnect project ID\n\n## Running the Project\n- **Development**: The workflow \"Server\" runs `npm run dev` in the apps/web directory\n- **Port**: 5000 (required for Replit)\n- **Host**: 0.0.0.0 (required for Replit proxy)\n\n## Known Issues\n- Console warnings about @react-native-async-storage/async-storage (non-blocking)\n- WalletConnect API 403 errors (uses local config fallback, non-blocking)\n- MetaMask SDK warnings (non-blocking)\n\n## Deployment\n- **Type**: Autoscale (stateless web app)\n- **Build**: `cd apps/web && npm run build`\n- **Run**: `cd apps/web && npm run start`\n\n## Notes\n- Original GitHub import had empty apps/web directory\n- Built entire frontend from scratch based on README specifications\n- Uses in-memory storage for agent receipts (not persistent)\n- Real transaction data pulled from Base network via Blockscout\n","size_bytes":5382}},"version":2}